{"ast":null,"code":"import { TICK_ERROR_DATE_TEXT, TICK_ERROR_PROJECT_TEXT, TICK_ERROR_TASK_TEXT, TICK_ERROR_TIME_TEXT, VALIDATION } from '../constants/Tick';\n/**\n * Validate tick input user date\n * @param str\n * @returns {boolean}\n */\n\nexport var isValidInputDate = function isValidInputDate(str) {\n  return !!VALIDATION.TICK_INPUT_DATE.test(str);\n};\n/**\n * Validate tick entered user full date\n * @param str\n * @returns {boolean}\n */\n\nexport var isFullDate = function isFullDate(str) {\n  return !!VALIDATION.TICK_INPUT_FULL_DATE.test(str);\n};\n/**\n * Validate tick entered user time\n * @param str\n * @returns {boolean}\n */\n\nexport var isValidInputTime = function isValidInputTime(str) {\n  return !!VALIDATION.TICK_INPUT_TIME.test(str);\n};\n/**\n * Validate tick entered user email\n * @param str\n * @returns {boolean}\n */\n\nexport var isValidInputEmail = function isValidInputEmail(str) {\n  return !!VALIDATION.EMAIL.test(str);\n};\n/**\n * Validate form for create tick entry\n * @param entry\n * @returns {Array}\n */\n\nexport var isErrorsTickEntries = function isErrorsTickEntries(entry) {\n  var errors = [];\n  var dateValue = entry.dateValue,\n      timeValue = entry.timeValue,\n      selectedProject = entry.selectedProject,\n      selectedTask = entry.selectedTask;\n\n  if (!selectedProject.value) {\n    errors.push({\n      field: 'project',\n      message: TICK_ERROR_PROJECT_TEXT\n    });\n  }\n\n  if (!selectedTask.value) {\n    errors.push({\n      field: 'task',\n      message: TICK_ERROR_TASK_TEXT\n    });\n  }\n\n  if (!dateValue) {\n    errors.push({\n      field: 'date',\n      message: TICK_ERROR_DATE_TEXT\n    });\n  }\n\n  if (VALIDATION.TICK_INPUT_IS_ERROR_TIME.test(timeValue)) {\n    errors.push({\n      field: 'hours',\n      message: TICK_ERROR_TIME_TEXT\n    });\n  }\n\n  return errors;\n};","map":{"version":3,"sources":["/home/alex/Desktop/tick/src/services/TickValidate.js"],"names":["TICK_ERROR_DATE_TEXT","TICK_ERROR_PROJECT_TEXT","TICK_ERROR_TASK_TEXT","TICK_ERROR_TIME_TEXT","VALIDATION","isValidInputDate","str","TICK_INPUT_DATE","test","isFullDate","TICK_INPUT_FULL_DATE","isValidInputTime","TICK_INPUT_TIME","isValidInputEmail","EMAIL","isErrorsTickEntries","entry","errors","dateValue","timeValue","selectedProject","selectedTask","value","push","field","message","TICK_INPUT_IS_ERROR_TIME"],"mappings":"AAAA,SACEA,oBADF,EAEEC,uBAFF,EAGEC,oBAHF,EAIEC,oBAJF,EAKEC,UALF,QAMO,mBANP;AAQA;;;;;;AAKA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAS;AACvC,SAAO,CAAC,CAACF,UAAU,CAACG,eAAX,CAA2BC,IAA3B,CAAgCF,GAAhC,CAAT;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACH,GAAD,EAAS;AACjC,SAAO,CAAC,CAACF,UAAU,CAACM,oBAAX,CAAgCF,IAAhC,CAAqCF,GAArC,CAAT;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACL,GAAD,EAAS;AACvC,SAAO,CAAC,CAACF,UAAU,CAACQ,eAAX,CAA2BJ,IAA3B,CAAgCF,GAAhC,CAAT;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,CAACP,GAAD,EAAS;AACxC,SAAO,CAAC,CAACF,UAAU,CAACU,KAAX,CAAiBN,IAAjB,CAAsBF,GAAtB,CAAT;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAW;AAC5C,MAAIC,MAAM,GAAG,EAAb;AAD4C,MAG1CC,SAH0C,GAOxCF,KAPwC,CAG1CE,SAH0C;AAAA,MAI1CC,SAJ0C,GAOxCH,KAPwC,CAI1CG,SAJ0C;AAAA,MAK1CC,eAL0C,GAOxCJ,KAPwC,CAK1CI,eAL0C;AAAA,MAM1CC,YAN0C,GAOxCL,KAPwC,CAM1CK,YAN0C;;AAS5C,MAAG,CAACD,eAAe,CAACE,KAApB,EAA0B;AACxBL,IAAAA,MAAM,CAACM,IAAP,CAAY;AACVC,MAAAA,KAAK,EAAC,SADI;AAEVC,MAAAA,OAAO,EAACxB;AAFE,KAAZ;AAID;;AAED,MAAG,CAACoB,YAAY,CAACC,KAAjB,EAAuB;AACrBL,IAAAA,MAAM,CAACM,IAAP,CAAY;AACVC,MAAAA,KAAK,EAAC,MADI;AAEVC,MAAAA,OAAO,EAACvB;AAFE,KAAZ;AAID;;AAED,MAAG,CAACgB,SAAJ,EAAc;AACZD,IAAAA,MAAM,CAACM,IAAP,CAAY;AACVC,MAAAA,KAAK,EAAC,MADI;AAEVC,MAAAA,OAAO,EAACzB;AAFE,KAAZ;AAID;;AAED,MAAGI,UAAU,CAACsB,wBAAX,CAAoClB,IAApC,CAAyCW,SAAzC,CAAH,EAAuD;AACrDF,IAAAA,MAAM,CAACM,IAAP,CAAY;AACVC,MAAAA,KAAK,EAAC,OADI;AAEVC,MAAAA,OAAO,EAACtB;AAFE,KAAZ;AAID;;AAED,SAAOc,MAAP;AACD,CAtCM","sourcesContent":["import {\n  TICK_ERROR_DATE_TEXT,\n  TICK_ERROR_PROJECT_TEXT,\n  TICK_ERROR_TASK_TEXT,\n  TICK_ERROR_TIME_TEXT,\n  VALIDATION,\n} from '../constants/Tick';\n\n/**\n * Validate tick input user date\n * @param str\n * @returns {boolean}\n */\nexport const isValidInputDate = (str) => {\n  return !!VALIDATION.TICK_INPUT_DATE.test(str);\n};\n\n/**\n * Validate tick entered user full date\n * @param str\n * @returns {boolean}\n */\nexport const isFullDate = (str) => {\n  return !!VALIDATION.TICK_INPUT_FULL_DATE.test(str);\n};\n\n/**\n * Validate tick entered user time\n * @param str\n * @returns {boolean}\n */\nexport const isValidInputTime = (str) => {\n  return !!VALIDATION.TICK_INPUT_TIME.test(str);\n};\n\n/**\n * Validate tick entered user email\n * @param str\n * @returns {boolean}\n */\nexport const isValidInputEmail = (str) => {\n  return !!VALIDATION.EMAIL.test(str);\n};\n\n/**\n * Validate form for create tick entry\n * @param entry\n * @returns {Array}\n */\nexport const isErrorsTickEntries = (entry) => {\n  let errors = [];\n  const {\n    dateValue,\n    timeValue,\n    selectedProject,\n    selectedTask,\n  } = entry;\n\n  if(!selectedProject.value){\n    errors.push({\n      field:'project',\n      message:TICK_ERROR_PROJECT_TEXT,\n    });\n  }\n\n  if(!selectedTask.value){\n    errors.push({\n      field:'task',\n      message:TICK_ERROR_TASK_TEXT,\n    });\n  }\n\n  if(!dateValue){\n    errors.push({\n      field:'date',\n      message:TICK_ERROR_DATE_TEXT,\n    });\n  }\n\n  if(VALIDATION.TICK_INPUT_IS_ERROR_TIME.test(timeValue)){\n    errors.push({\n      field:'hours',\n      message:TICK_ERROR_TIME_TEXT,\n    });\n  }\n\n  return errors;\n};\n"]},"metadata":{},"sourceType":"module"}