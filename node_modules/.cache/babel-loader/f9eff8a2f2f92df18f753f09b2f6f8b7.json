{"ast":null,"code":"var _jsxFileName = \"/home/alex/Desktop/tick/src/components/Tick/TaskStatus.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Rounding from './Rounding';\nimport { TICK_BUDGET_TEXT, TICK_DONE_TEXT, TICK_NAME_TEXT, TICK_RETURN_TEXT, TICK_STATUS_TEXT, TICK_TOTAL_TEXT, TICK_TRACK_TEXT, TICK_HOURS_SYMBOL, TICK_PERCENT_SYMBOL } from \"../../../constants/Tick\";\n/**\n * Component for creating a task\n * report after the user adds time\n * @param props\n * @returns {*}\n * @constructor\n */\n\nvar TaskStatus = function TaskStatus(props) {\n  var task = props.task,\n      tickReturnTracker = props.tickReturnTracker;\n  return React.createElement(\"div\", {\n    className: classNames('tick-task-status'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classNames('task-header'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, TICK_STATUS_TEXT), React.createElement(\"button\", {\n    onClick: tickReturnTracker,\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, TICK_RETURN_TEXT)), React.createElement(\"div\", {\n    className: classNames('task-body'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: classNames('task-status-wrap'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, TICK_NAME_TEXT), task.name), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, TICK_TRACK_TEXT), React.createElement(Rounding, {\n    numberValue: task.timeValue,\n    symbol: TICK_HOURS_SYMBOL,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, TICK_TOTAL_TEXT), React.createElement(Rounding, {\n    numberValue: task.total_hours,\n    symbol: TICK_HOURS_SYMBOL,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, TICK_BUDGET_TEXT), React.createElement(Rounding, {\n    numberValue: task.budget,\n    symbol: TICK_HOURS_SYMBOL,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, TICK_DONE_TEXT), React.createElement(Rounding, {\n    numberValue: task.total_hours / task.budget * 100,\n    symbol: TICK_PERCENT_SYMBOL,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })))));\n};\n\nTaskStatus.propTypes = {\n  task: PropTypes.instanceOf(Object).isRequired,\n  tickReturnTracker: PropTypes.func.isRequired\n};\nexport default TaskStatus;","map":{"version":3,"sources":["/home/alex/Desktop/tick/src/components/Tick/TaskStatus.js"],"names":["React","PropTypes","classNames","Rounding","TICK_BUDGET_TEXT","TICK_DONE_TEXT","TICK_NAME_TEXT","TICK_RETURN_TEXT","TICK_STATUS_TEXT","TICK_TOTAL_TEXT","TICK_TRACK_TEXT","TICK_HOURS_SYMBOL","TICK_PERCENT_SYMBOL","TaskStatus","props","task","tickReturnTracker","name","timeValue","total_hours","budget","propTypes","instanceOf","Object","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Rounding from './Rounding';\nimport {\n  TICK_BUDGET_TEXT,\n  TICK_DONE_TEXT,\n  TICK_NAME_TEXT,\n  TICK_RETURN_TEXT,\n  TICK_STATUS_TEXT,\n  TICK_TOTAL_TEXT,\n  TICK_TRACK_TEXT,\n  TICK_HOURS_SYMBOL,\n  TICK_PERCENT_SYMBOL,\n} from \"../../../constants/Tick\";\n\n/**\n * Component for creating a task\n * report after the user adds time\n * @param props\n * @returns {*}\n * @constructor\n */\nconst TaskStatus = (props) => {\n\n  const {\n    task,\n    tickReturnTracker,\n  } = props;\n\n  return (\n    <div className={classNames('tick-task-status')}>\n      <div className={classNames('task-header')}>\n        <h3>{TICK_STATUS_TEXT}</h3>\n        <button\n          onClick={tickReturnTracker}\n          type='button'\n        >\n          {TICK_RETURN_TEXT}\n        </button>\n      </div>\n      <div className={classNames('task-body')}>\n        <div className={classNames('task-status-wrap')}>\n          <div>\n            <span>{TICK_NAME_TEXT}</span>\n            {task.name}\n          </div>\n          <div>\n            <span>{TICK_TRACK_TEXT}</span>\n            <Rounding\n              numberValue={task.timeValue}\n              symbol={TICK_HOURS_SYMBOL}\n            />\n          </div>\n          <div>\n            <span>{TICK_TOTAL_TEXT}</span>\n            <Rounding\n              numberValue={task.total_hours}\n              symbol={TICK_HOURS_SYMBOL}\n            />\n          </div>\n          <div>\n            <span>{TICK_BUDGET_TEXT}</span>\n            <Rounding\n              numberValue={task.budget}\n              symbol={TICK_HOURS_SYMBOL}\n            />\n          </div>\n          <div>\n            <span>{TICK_DONE_TEXT}</span>\n            <Rounding\n              numberValue={task.total_hours / task.budget * 100}\n              symbol={TICK_PERCENT_SYMBOL}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nTaskStatus.propTypes = {\n  task: PropTypes.instanceOf(Object).isRequired,\n  tickReturnTracker: PropTypes.func.isRequired,\n};\n\nexport default TaskStatus;\n"]},"metadata":{},"sourceType":"module"}