{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _qs = require('qs');\n\nvar _qs2 = _interopRequireDefault(_qs);\n\nvar _feathersCommons = require('feathers-commons');\n\nvar _feathersErrors = require('feathers-errors');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction toError(error) {\n  throw (0, _feathersErrors.convert)(error);\n}\n\nvar Base = function () {\n  function Base(settings) {\n    _classCallCheck(this, Base);\n\n    this.name = (0, _feathersCommons.stripSlashes)(settings.name);\n    this.options = settings.options;\n    this.connection = settings.connection;\n    this.base = settings.base + '/' + this.name;\n  }\n\n  _createClass(Base, [{\n    key: 'makeUrl',\n    value: function makeUrl(params, id) {\n      params = params || {};\n      var url = this.base;\n\n      if (typeof id !== 'undefined' && id !== null) {\n        url += '/' + id;\n      }\n\n      if (Object.keys(params).length !== 0) {\n        var queryString = _qs2.default.stringify(params);\n\n        url += '?' + queryString;\n      }\n\n      return url;\n    }\n  }, {\n    key: 'find',\n    value: function find() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.request({\n        url: this.makeUrl(params.query),\n        method: 'GET',\n        headers: _extends({}, params.headers)\n      }).catch(toError);\n    }\n  }, {\n    key: 'get',\n    value: function get(id) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof id === 'undefined') {\n        return Promise.reject(new Error('id for \\'get\\' can not be undefined'));\n      }\n\n      return this.request({\n        url: this.makeUrl(params.query, id),\n        method: 'GET',\n        headers: _extends({}, params.headers)\n      }).catch(toError);\n    }\n  }, {\n    key: 'create',\n    value: function create(body) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request({\n        url: this.makeUrl(params.query),\n        body: body,\n        method: 'POST',\n        headers: _extends({\n          'Content-Type': 'application/json'\n        }, params.headers)\n      }).catch(toError);\n    }\n  }, {\n    key: 'update',\n    value: function update(id, body) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (typeof id === 'undefined') {\n        return Promise.reject(new Error('id for \\'update\\' can not be undefined, only \\'null\\' when updating multiple entries'));\n      }\n\n      return this.request({\n        url: this.makeUrl(params.query, id),\n        body: body,\n        method: 'PUT',\n        headers: _extends({\n          'Content-Type': 'application/json'\n        }, params.headers)\n      }).catch(toError);\n    }\n  }, {\n    key: 'patch',\n    value: function patch(id, body) {\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (typeof id === 'undefined') {\n        return Promise.reject(new Error('id for \\'patch\\' can not be undefined, only \\'null\\' when updating multiple entries'));\n      }\n\n      return this.request({\n        url: this.makeUrl(params.query, id),\n        body: body,\n        method: 'PATCH',\n        headers: _extends({\n          'Content-Type': 'application/json'\n        }, params.headers)\n      }).catch(toError);\n    }\n  }, {\n    key: 'remove',\n    value: function remove(id) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof id === 'undefined') {\n        return Promise.reject(new Error('id for \\'remove\\' can not be undefined, only \\'null\\' when removing multiple entries'));\n      }\n\n      return this.request({\n        url: this.makeUrl(params.query, id),\n        method: 'DELETE',\n        headers: _extends({}, params.headers)\n      }).catch(toError);\n    }\n  }]);\n\n  return Base;\n}();\n\nexports.default = Base;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}