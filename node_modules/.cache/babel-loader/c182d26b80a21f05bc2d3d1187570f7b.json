{"ast":null,"code":"import _objectSpread from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { TICK_API_CLIENTS_URL, TICK_API_PROJECTS_URL, TICK_API_USERS_URL, TICK_API_ROLES_URL, TICK_API_TASKS_URL, TICK_API_ENTRIES_URL, API_PREFIX } from '../constants/Tick';\nimport FeathersClient from \"../../utils/FeathersClient\";\n/**\n * Tick service for Api methods\n * https://www.tickspot.com/api\n */\n\nvar TickService =\n/*#__PURE__*/\nfunction () {\n  function TickService() {\n    _classCallCheck(this, TickService);\n\n    this.roles = FeathersClient.service(API_PREFIX + TICK_API_ROLES_URL);\n    this.clients = FeathersClient.service(API_PREFIX + TICK_API_CLIENTS_URL);\n    this.projects = FeathersClient.service(API_PREFIX + TICK_API_PROJECTS_URL);\n    this.tasks = FeathersClient.service(API_PREFIX + TICK_API_TASKS_URL);\n    this.users = FeathersClient.service(API_PREFIX + TICK_API_USERS_URL);\n    this.entries = FeathersClient.service(API_PREFIX + TICK_API_ENTRIES_URL);\n  }\n  /**\n   * Create auth tick headers from localStorage\n   * @returns {*}\n   */\n\n\n  _createClass(TickService, [{\n    key: \"getAuthParams\",\n    value: function getAuthParams() {\n      var tickAuth = JSON.parse(localStorage.getItem('tickAuth'));\n      var api_token = tickAuth.api_token,\n          subscription_id = tickAuth.subscription_id,\n          username = tickAuth.username;\n      return {\n        headers: {\n          'TickSpot-Authorization': \"Token token=\".concat(api_token),\n          'TickSpot-User-Agent': \"User-Agent: MyCoolApp (\".concat(username, \")\")\n        },\n        query: {\n          subscriptionId: subscription_id\n        }\n      };\n    }\n    /**\n     * Get tick projects display list in track select\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getProjects\",\n    value: function getProjects() {\n      return this.projects.find(this.getAuthParams());\n    }\n    /**\n    * Get tick clients display list in track select\n    * @returns {*}\n    */\n\n  }, {\n    key: \"getClients\",\n    value: function getClients() {\n      return this.clients.find(this.getAuthParams());\n    }\n    /**\n     * Get tick users for getting user id param for creative entry time\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getUsers\",\n    value: function getUsers() {\n      return this.users.find(this.getAuthParams());\n    }\n    /**\n     * Get tick tasks for display list in track select\n     * @param {number} projectId\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getTasks\",\n    value: function getTasks(projectId) {\n      var authParams = this.getAuthParams();\n      return this.tasks.find({\n        headers: authParams.headers,\n        query: _objectSpread({}, authParams.query, {\n          projectId: projectId\n        })\n      });\n    }\n    /**\n     * Get task for display user task status after track time\n     * @param {number} taskId\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getTask\",\n    value: function getTask(taskId) {\n      return this.tasks.get(taskId, this.getAuthParams());\n    }\n    /**\n     * Auth tick user by email and password\n     * @param {string} username\n     * @param {string} password\n     * @returns {*}\n     */\n\n  }, {\n    key: \"auth\",\n    value: function auth(username, password) {\n      return this.roles.find({\n        headers: {\n          'TickSpot-Authorization': \"Basic \".concat(btoa(\"\".concat(username, \":\").concat(password))),\n          'TickSpot-User-Agent': \"MyCoolApp(\".concat(username, \")\")\n        }\n      });\n    }\n    /**\n     * Create entry time\n     * @param {object} data\n     * @returns {*}\n     */\n\n  }, {\n    key: \"createEntry\",\n    value: function createEntry(data) {\n      return this.entries.create(data, this.getAuthParams());\n    }\n  }]);\n\n  return TickService;\n}();\n\nexport default new TickService();","map":{"version":3,"sources":["/home/alex/Desktop/tick/src/Tick/services/Tick.js"],"names":["TICK_API_CLIENTS_URL","TICK_API_PROJECTS_URL","TICK_API_USERS_URL","TICK_API_ROLES_URL","TICK_API_TASKS_URL","TICK_API_ENTRIES_URL","API_PREFIX","FeathersClient","TickService","roles","service","clients","projects","tasks","users","entries","tickAuth","JSON","parse","localStorage","getItem","api_token","subscription_id","username","headers","query","subscriptionId","find","getAuthParams","projectId","authParams","taskId","get","password","btoa","data","create"],"mappings":";;;AAAA,SACEA,oBADF,EAEEC,qBAFF,EAGEC,kBAHF,EAIEC,kBAJF,EAKEC,kBALF,EAMEC,oBANF,EAOEC,UAPF,QAQO,mBARP;AASA,OAAOC,cAAP,MAA2B,4BAA3B;AAEA;;;;;IAIMC,W;;;AAEJ,yBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAaF,cAAc,CAACG,OAAf,CAAuBJ,UAAU,GAAGH,kBAApC,CAAb;AACA,SAAKQ,OAAL,GAAeJ,cAAc,CAACG,OAAf,CAAuBJ,UAAU,GAAGN,oBAApC,CAAf;AACA,SAAKY,QAAL,GAAgBL,cAAc,CAACG,OAAf,CAAuBJ,UAAU,GAAGL,qBAApC,CAAhB;AACA,SAAKY,KAAL,GAAaN,cAAc,CAACG,OAAf,CAAuBJ,UAAU,GAAGF,kBAApC,CAAb;AACA,SAAKU,KAAL,GAAaP,cAAc,CAACG,OAAf,CAAuBJ,UAAU,GAAGJ,kBAApC,CAAb;AACA,SAAKa,OAAL,GAAeR,cAAc,CAACG,OAAf,CAAuBJ,UAAU,GAAGD,oBAApC,CAAf;AACD;AAED;;;;;;;;oCAIgB;AACd,UAAMW,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAjB;AADc,UAGZC,SAHY,GAMVL,QANU,CAGZK,SAHY;AAAA,UAIZC,eAJY,GAMVN,QANU,CAIZM,eAJY;AAAA,UAKZC,QALY,GAMVP,QANU,CAKZO,QALY;AAQd,aAAO;AACLC,QAAAA,OAAO,EAAE;AACP,0DAAyCH,SAAzC,CADO;AAEP,kEAAiDE,QAAjD;AAFO,SADJ;AAKLE,QAAAA,KAAK,EAAE;AACLC,UAAAA,cAAc,EAAEJ;AADX;AALF,OAAP;AASD;AAED;;;;;;;kCAIc;AACZ,aAAO,KAAKV,QAAL,CAAce,IAAd,CAAmB,KAAKC,aAAL,EAAnB,CAAP;AACD;AAEA;;;;;;;iCAIY;AACX,aAAO,KAAKjB,OAAL,CAAagB,IAAb,CAAkB,KAAKC,aAAL,EAAlB,CAAP;AACD;AAED;;;;;;;+BAIW;AACT,aAAO,KAAKd,KAAL,CAAWa,IAAX,CAAgB,KAAKC,aAAL,EAAhB,CAAP;AACD;AAED;;;;;;;;6BAKSC,S,EAAW;AAClB,UAAMC,UAAU,GAAG,KAAKF,aAAL,EAAnB;AACA,aAAO,KAAKf,KAAL,CAAWc,IAAX,CAAgB;AACrBH,QAAAA,OAAO,EAAEM,UAAU,CAACN,OADC;AAErBC,QAAAA,KAAK,oBACAK,UAAU,CAACL,KADX;AAEHI,UAAAA,SAAS,EAATA;AAFG;AAFgB,OAAhB,CAAP;AAOD;AAED;;;;;;;;4BAKQE,M,EAAQ;AACd,aAAO,KAAKlB,KAAL,CAAWmB,GAAX,CAAeD,MAAf,EAAuB,KAAKH,aAAL,EAAvB,CAAP;AACD;AAED;;;;;;;;;yBAMKL,Q,EAAUU,Q,EAAU;AACtB,aAAO,KAAKxB,KAAL,CAAWkB,IAAX,CAAgB;AACtBH,QAAAA,OAAO,EAAC;AACN,oDAAmCU,IAAI,WAAIX,QAAJ,cAAgBU,QAAhB,EAAvC,CADM;AAEN,qDAAoCV,QAApC;AAFM;AADc,OAAhB,CAAP;AAMF;AAED;;;;;;;;gCAKYY,I,EAAM;AAChB,aAAO,KAAKpB,OAAL,CAAaqB,MAAb,CAAoBD,IAApB,EAA0B,KAAKP,aAAL,EAA1B,CAAP;AACD;;;;;;AAIH,eAAe,IAAIpB,WAAJ,EAAf","sourcesContent":["import {\n  TICK_API_CLIENTS_URL,\n  TICK_API_PROJECTS_URL,\n  TICK_API_USERS_URL,\n  TICK_API_ROLES_URL,\n  TICK_API_TASKS_URL,\n  TICK_API_ENTRIES_URL,\n  API_PREFIX,\n} from '../constants/Tick';\nimport FeathersClient from \"../../utils/FeathersClient\";\n\n/**\n * Tick service for Api methods\n * https://www.tickspot.com/api\n */\nclass TickService {\n\n  constructor() {\n    this.roles = FeathersClient.service(API_PREFIX + TICK_API_ROLES_URL);\n    this.clients = FeathersClient.service(API_PREFIX + TICK_API_CLIENTS_URL);\n    this.projects = FeathersClient.service(API_PREFIX + TICK_API_PROJECTS_URL);\n    this.tasks = FeathersClient.service(API_PREFIX + TICK_API_TASKS_URL);\n    this.users = FeathersClient.service(API_PREFIX + TICK_API_USERS_URL);\n    this.entries = FeathersClient.service(API_PREFIX + TICK_API_ENTRIES_URL);\n  }\n\n  /**\n   * Create auth tick headers from localStorage\n   * @returns {*}\n   */\n  getAuthParams() {\n    const tickAuth = JSON.parse(localStorage.getItem('tickAuth'));\n    const {\n      api_token,\n      subscription_id,\n      username,\n    } = tickAuth;\n\n    return {\n      headers: {\n        'TickSpot-Authorization': `Token token=${api_token}`,\n        'TickSpot-User-Agent': `User-Agent: MyCoolApp (${username})`,\n      },\n      query: {\n        subscriptionId: subscription_id,\n      },\n    };\n  }\n\n  /**\n   * Get tick projects display list in track select\n   * @returns {*}\n   */\n  getProjects() {\n    return this.projects.find(this.getAuthParams());\n  }\n\n   /**\n   * Get tick clients display list in track select\n   * @returns {*}\n   */\n  getClients() {\n    return this.clients.find(this.getAuthParams());\n  }\n\n  /**\n   * Get tick users for getting user id param for creative entry time\n   * @returns {*}\n   */\n  getUsers() {\n    return this.users.find(this.getAuthParams());\n  }\n\n  /**\n   * Get tick tasks for display list in track select\n   * @param {number} projectId\n   * @returns {*}\n   */\n  getTasks(projectId) {\n    const authParams = this.getAuthParams();\n    return this.tasks.find({\n      headers: authParams.headers,\n      query:{\n        ...authParams.query,\n        projectId,\n      },\n    });\n  }\n\n  /**\n   * Get task for display user task status after track time\n   * @param {number} taskId\n   * @returns {*}\n   */\n  getTask(taskId) {\n    return this.tasks.get(taskId, this.getAuthParams());\n  }\n\n  /**\n   * Auth tick user by email and password\n   * @param {string} username\n   * @param {string} password\n   * @returns {*}\n   */\n  auth(username, password) {\n     return this.roles.find({\n      headers:{\n        'TickSpot-Authorization': `Basic ${btoa(`${username}:${password}`)}`,\n        'TickSpot-User-Agent': `MyCoolApp(${username})`,\n      },\n    });\n  }\n\n  /**\n   * Create entry time\n   * @param {object} data\n   * @returns {*}\n   */\n  createEntry(data) {\n    return this.entries.create(data, this.getAuthParams());\n  }\n\n}\n\nexport default new TickService();\n"]},"metadata":{},"sourceType":"module"}