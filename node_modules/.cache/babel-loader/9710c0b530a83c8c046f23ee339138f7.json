{"ast":null,"code":"import _classCallCheck from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/alex/Desktop/tick/src/components/Tick/TaskDate.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport { Calendar } from 'react-date-range';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { isFullDate, isValidInputDate } from '../../services/TickValidate';\nimport { TICK_DATE_PLACEHOLDER } from '../../constants/Tick';\n/**\n * Class for input user date\n */\n\nvar TaskDate =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskDate, _Component);\n\n  /**\n   * Set state for show/hide datePicker\n   * @param {object} props\n   */\n  function TaskDate(props) {\n    var _this;\n\n    _classCallCheck(this, TaskDate);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskDate).call(this, props));\n\n    _this.changeInputDate = function (event) {\n      var changeTickDate = _this.props.changeTickDate; // get input date value\n\n      var value = event.target.value;\n      /**\n       * if valid each character that enter user\n       * save value in component state\n       */\n\n      if (isValidInputDate(value)) {\n        _this.setState({\n          userDateValue: value\n        });\n      }\n      /**\n       * Check whether the user entered the full date\n       * If full date save value in redux state\n       */\n\n\n      if (isFullDate(value)) {\n        // Create moment object for convert date for sending the server\n        var date = moment(new Date(value));\n        changeTickDate(date); // Update calendar state for display entered by the date user in the calendar\n\n        _this._Calendar.setState({\n          date: date,\n          shownDate: date\n        });\n      } else {\n        _this.setEmptyDateValue(null);\n      }\n    };\n\n    _this.changeCalendarDate = function (date) {\n      var changeTickDate = _this.props.changeTickDate;\n      changeTickDate(date);\n\n      _this.setState({\n        userDateValue: date.format('M/D/Y'),\n        showDatePickerValue: 'hide'\n      });\n\n      document.removeEventListener('click', _this.hideDatePicker);\n    };\n\n    _this.showDatePicker = function () {\n      /**\n       * Set hide tick outside click\n       */\n      document.addEventListener('click', _this.hideDatePicker);\n\n      _this.setState({\n        showDatePickerValue: 'show'\n      });\n    };\n\n    _this.hideDatePicker = function (event) {\n      var isCalendar = event.path.find(function (elem) {\n        return elem.classList && elem.classList.contains('t-calendar');\n      });\n\n      if (!isCalendar) {\n        _this.setState({\n          showDatePickerValue: 'hide'\n        });\n\n        document.removeEventListener('click', _this.hideDatePicker);\n      }\n    };\n\n    _this.state = {\n      showDatePickerValue: '',\n      userDateValue: new Date().toLocaleDateString('en-US')\n    };\n    _this.setEmptyDateValue = debounce(props.changeTickDate, 500);\n    return _this;\n  }\n\n  _createClass(TaskDate, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var changeTickDate = this.props.changeTickDate; // Create moment object for convert date for sending the server\n\n      var date = moment(new Date());\n      changeTickDate(date);\n    }\n    /**\n     * Input user date string\n     * @param {object} event\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          showDatePickerValue = _this$state.showDatePickerValue,\n          userDateValue = _this$state.userDateValue;\n      var showDatePicker = this.showDatePicker,\n          changeInputDate = this.changeInputDate,\n          changeCalendarDate = this.changeCalendarDate;\n      return React.createElement(\"div\", {\n        className: classNames('task-date'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        ref: function ref(node) {\n          return _this2._datePicker = node;\n        },\n        type: \"text\",\n        value: userDateValue,\n        placeholder: TICK_DATE_PLACEHOLDER,\n        onChange: changeInputDate,\n        onClick: showDatePicker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classNames('t-calendar', showDatePickerValue),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Calendar, {\n        ref: function ref(e) {\n          return _this2._Calendar = e;\n        },\n        onChange: changeCalendarDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return TaskDate;\n}(Component);\n\nTaskDate.propTypes = {\n  changeTickDate: PropTypes.func.isRequired\n};\nexport default TaskDate;","map":{"version":3,"sources":["/home/alex/Desktop/tick/src/components/Tick/TaskDate.js"],"names":["React","Component","PropTypes","debounce","Calendar","classNames","moment","isFullDate","isValidInputDate","TICK_DATE_PLACEHOLDER","TaskDate","props","changeInputDate","event","changeTickDate","value","target","setState","userDateValue","date","Date","_Calendar","shownDate","setEmptyDateValue","changeCalendarDate","format","showDatePickerValue","document","removeEventListener","hideDatePicker","showDatePicker","addEventListener","isCalendar","path","find","elem","classList","contains","state","toLocaleDateString","node","_datePicker","e","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, {\n  Component,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport {\n  Calendar,\n} from 'react-date-range';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport {\n  isFullDate,\n  isValidInputDate,\n} from '../../services/TickValidate';\nimport {\n  TICK_DATE_PLACEHOLDER,\n} from '../../constants/Tick';\n\n\n/**\n * Class for input user date\n */\nclass TaskDate extends Component {\n  /**\n   * Set state for show/hide datePicker\n   * @param {object} props\n   */\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n      showDatePickerValue: '',\n      userDateValue: new Date().toLocaleDateString('en-US'),\n    };\n    this.setEmptyDateValue = debounce(props.changeTickDate, 500);\n  }\n\n  componentDidMount() {\n    const {\n      changeTickDate,\n    } = this.props;\n    // Create moment object for convert date for sending the server\n    const date = moment(new Date());\n    changeTickDate(date);\n  }\n\n  /**\n   * Input user date string\n   * @param {object} event\n   */\n  changeInputDate = (event) => {\n    const {\n      changeTickDate,\n    } = this.props;\n    // get input date value\n    const value = event.target.value;\n\n    /**\n     * if valid each character that enter user\n     * save value in component state\n     */\n    if (isValidInputDate(value)) {\n      this.setState({\n        userDateValue: value,\n      });\n    }\n\n    /**\n     * Check whether the user entered the full date\n     * If full date save value in redux state\n     */\n    if (isFullDate(value)) {\n      // Create moment object for convert date for sending the server\n      const date = moment(new Date(value));\n      changeTickDate(date);\n      // Update calendar state for display entered by the date user in the calendar\n      this._Calendar.setState({\n        date,\n        shownDate: date,\n      });\n    } else {\n      this.setEmptyDateValue(null);\n    }\n  };\n\n  /**\n   * Set date in state component if user choice\n   * date value in calendar and hide calendar\n   * @param {object} date\n   */\n  changeCalendarDate = (date) => {\n    const {\n      changeTickDate,\n    } = this.props;\n    changeTickDate(date);\n    this.setState({\n      userDateValue: date.format('M/D/Y'),\n      showDatePickerValue: 'hide',\n    });\n    document.removeEventListener('click', (this.hideDatePicker));\n  };\n\n  /**\n   * Show calendar\n   */\n  showDatePicker = () => {\n    /**\n     * Set hide tick outside click\n     */\n    document.addEventListener('click', (this.hideDatePicker));\n    this.setState({\n      showDatePickerValue: 'show',\n    });\n  };\n\n  /**\n   * hide calendar\n   */\n  hideDatePicker = (event) => {\n    let isCalendar = event.path.find(elem =>\n      elem.classList && elem.classList.contains('t-calendar'));\n    if(!isCalendar) {\n      this.setState({\n        showDatePickerValue: 'hide',\n      });\n      document.removeEventListener('click', (this.hideDatePicker));\n    }\n  };\n\n  render() {\n    const {\n      showDatePickerValue,\n      userDateValue,\n    } = this.state;\n    const {\n      showDatePicker,\n      changeInputDate,\n      changeCalendarDate,\n    } = this;\n\n    return (\n      <div\n        className={classNames('task-date')}\n      >\n        <input\n          ref={node => this._datePicker = node}\n          type='text'\n          value={userDateValue}\n          placeholder={TICK_DATE_PLACEHOLDER}\n          onChange={changeInputDate}\n          onClick={showDatePicker}\n        />\n\n        <div\n          className={classNames('t-calendar', showDatePickerValue)}\n        >\n          <Calendar\n            ref={(e) => this._Calendar = e}\n            onChange={changeCalendarDate}\n          />\n\n        </div>\n      </div>\n    );\n  }\n}\n\nTaskDate.propTypes = {\n  changeTickDate: PropTypes.func.isRequired,\n};\n\nexport default TaskDate;\n"]},"metadata":{},"sourceType":"module"}