{"ast":null,"code":"import _slicedToArray from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/alex/Desktop/tick/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport TickService from '../services/Tick';\nimport { isErrorsTickEntries } from '../services/TickValidate';\nimport { TICK_SET_IS_AUTH, TICK_SET_PROJECT, TICK_SET_SELECTED_TASK, TICK_SET_PROJECTS, TICK_SET_TASKS, TICK_SET_TIME, TICK_SET_DATE, TICK_SET_MESSAGE, TICK_CLEAR, TICK_SET_TASK, TICK_SET_MESSAGES, DELAY_HIDE_MESSAGES, TICK_UNAUTHORIZED_TEXT, TICK_UNAUTHORIZED_STATUS, TICK_UNPROCESSABLE_STATUS, TICK_UNPROCESSABLE_TEXT, TICK_BAD_REQUEST_TEXT, TICK_SET_IS_FETCHING } from '../constants/Tick';\n/**\n * Set track message for task\n * @param {array} messages\n * @returns {Function}\n */\n\nexport var displayMessages = function displayMessages(messages) {\n  return function (dispatch) {\n    dispatch({\n      type: TICK_SET_MESSAGES,\n      messages: messages\n    });\n    setTimeout(function () {\n      dispatch({\n        type: TICK_SET_MESSAGES,\n        messages: []\n      });\n    }, DELAY_HIDE_MESSAGES);\n  };\n};\n\nvar setIsFetching = function setIsFetching(isFetching, dispatch) {\n  dispatch({\n    type: TICK_SET_IS_FETCHING,\n    isFetching: isFetching\n  });\n};\n\nvar setClients = function setClients(data) {\n  var tickClients = {};\n  data.forEach(function (client) {\n    tickClients[client.id] = client;\n  });\n  localStorage.setItem('tickClients', JSON.stringify(tickClients));\n  return tickClients;\n};\n\nvar setProjects = function setProjects(projects, dispatch) {\n  var clients = JSON.parse(localStorage.getItem('tickClients'));\n  var projectOptions = projects.reduce(function (data, project) {\n    var lastProject = data.length ? data[data.length - 1] : null;\n\n    if (!lastProject || lastProject.client_id !== project.client_id) {\n      data.push({\n        label: clients[project.client_id]['name'],\n        client_id: project.client_id,\n        value: ''\n      });\n    }\n\n    return data.concat({\n      label: project.name,\n      client_id: project.client_id,\n      value: project.id\n    });\n  }, []);\n  /**\n   * Set projects for redux state\n   */\n\n  dispatch({\n    type: TICK_SET_PROJECTS,\n    projects: projectOptions\n  });\n};\n/**\n * Tick auth handler\n * @param username\n * @param password\n * @returns {Function}\n */\n\n\nexport var tickAuth = function tickAuth(username, password) {\n  return function (dispatch) {\n    setIsFetching(true, dispatch);\n    TickService.auth(username, password).then(function (data) {\n      if (!Array.isArray(data)) {\n        throw new Error(TICK_BAD_REQUEST_TEXT);\n      }\n\n      var dataAuth = data && data[0] ? data[0] : null;\n      /**\n       * Save user auth token, subscription_id and username for localStorage\n       */\n\n      localStorage.setItem('tickAuth', JSON.stringify(_objectSpread({}, dataAuth, {\n        username: username\n      })));\n      /**\n       * Set is auth params for check isLogged user\n       */\n\n      dispatch({\n        type: TICK_SET_IS_AUTH,\n        isAuth: true\n      });\n    }).then(function () {\n      /**\n       * Get users\n       */\n      return TickService.getUsers();\n    }).then(function (users) {\n      /**\n       * Save user data for localStorage\n       */\n      var currentUser = users.find(function (user) {\n        return user.email === username;\n      });\n      localStorage.setItem('tickUser', JSON.stringify(currentUser));\n    }).then(function () {\n      /**\n       * Get user clients and projects\n       */\n      return Promise.all([TickService.getClients(), TickService.getProjects()]);\n    }).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          clients = _ref2[0],\n          projects = _ref2[1];\n\n      setClients(clients);\n      setProjects(projects, dispatch);\n      setIsFetching(false, dispatch);\n    }).catch(function (error) {\n      if (error.code === TICK_UNAUTHORIZED_STATUS) {\n        displayMessages([{\n          message: TICK_UNAUTHORIZED_TEXT\n        }])(dispatch);\n      }\n\n      setIsFetching(false, dispatch);\n    });\n  };\n};\n/**\n * Check exists user in localStorage\n * @returns {Function}\n */\n\nexport var tickIsAuth = function tickIsAuth() {\n  return function (dispatch) {\n    var isAuth = !!localStorage.getItem('tickAuth');\n    dispatch({\n      type: TICK_SET_IS_AUTH,\n      isAuth: isAuth\n    });\n\n    if (isAuth) {\n      TickService.getProjects().then(function (projects) {\n        setProjects(projects, dispatch);\n      });\n    }\n  };\n};\n/**\n * Logout user from tick\n * clear localStorage\n * @returns {Function}\n */\n\nexport var tickLogout = function tickLogout() {\n  return function (dispatch) {\n    var isTickAuth = !!localStorage.getItem('tickAuth');\n    var isTickUser = !!localStorage.getItem('tickUser');\n\n    if (isTickAuth || isTickUser) {\n      localStorage.removeItem('tickAuth');\n      localStorage.removeItem('tickUser');\n      dispatch({\n        type: TICK_SET_IS_AUTH,\n        isAuth: false\n      });\n      dispatch({\n        type: TICK_CLEAR\n      });\n      dispatch({\n        type: TICK_SET_PROJECTS,\n        projects: []\n      });\n      dispatch({\n        type: TICK_SET_TASKS,\n        tasks: []\n      });\n    }\n  };\n};\n/**\n * Set selected project and get project tasks\n * @param {object} selectedProject\n * @returns {Function}\n */\n\nexport var changeProject = function changeProject(selectedProject) {\n  return function (dispatch) {\n    setIsFetching(true, dispatch);\n    TickService.getTasks(selectedProject.value).then(function (tasks) {\n      dispatch({\n        type: TICK_SET_PROJECT,\n        selectedProject: selectedProject\n      });\n      dispatch({\n        type: TICK_SET_TASKS,\n        tasks: tasks\n      });\n      setIsFetching(false, dispatch);\n    }).catch(function (error) {\n      if (error.response.status === TICK_UNAUTHORIZED_STATUS) {\n        displayMessages([{\n          message: TICK_UNAUTHORIZED_TEXT\n        }])(dispatch);\n      }\n\n      setIsFetching(false, dispatch);\n    });\n  };\n};\n/**\n * Set selected task\n * @param {object} selectedTask\n * @returns {Function}\n */\n\nexport var changeTask = function changeTask(selectedTask) {\n  return function (dispatch) {\n    dispatch({\n      type: TICK_SET_SELECTED_TASK,\n      selectedTask: selectedTask\n    });\n  };\n};\n/**\n * Set track time for task\n * @param {string} value\n * @returns {Function}\n */\n\nexport var changeTickTime = function changeTickTime(value) {\n  return function (dispatch) {\n    dispatch({\n      type: TICK_SET_TIME,\n      timeValue: value\n    });\n  };\n};\n/**\n * Set track date for task\n * @param {object} date\n * @returns {Function}\n */\n\nexport var changeTickDate = function changeTickDate(date) {\n  return function (dispatch) {\n    // if user not input full date set date empty string\n    var dateValue = date ? date.format('Y-M-D') : '';\n    dispatch({\n      type: TICK_SET_DATE,\n      dateValue: dateValue\n    });\n  };\n};\n/**\n * Hide task status and show tracker\n * @returns {Function}\n */\n\nexport var tickReturnTracker = function tickReturnTracker() {\n  return function (dispatch) {\n    dispatch({\n      type: TICK_CLEAR\n    });\n  };\n};\n/**\n * Set track message for task\n * @param {string} messageValue\n * @returns {Function}\n */\n\nexport var changeTickMessage = function changeTickMessage(messageValue) {\n  return function (dispatch) {\n    dispatch({\n      type: TICK_SET_MESSAGE,\n      messageValue: messageValue\n    });\n  };\n};\n/**\n * Send track time\n * @param {object} entry\n * @returns {Function}\n */\n\nexport var createEntry = function createEntry(entry) {\n  return function (dispatch) {\n    var errors = isErrorsTickEntries(entry); // get tick user tick data from localStorage\n\n    var user = JSON.parse(localStorage.getItem('tickUser'));\n\n    if (!errors.length) {\n      setIsFetching(true, dispatch); // set data for create entry method\n\n      var entryQuery = {\n        date: entry.dateValue,\n        hours: entry.timeValue,\n        notes: entry.messageValue,\n        taskId: entry.selectedTask.value,\n        userId: user.id\n      };\n      TickService.createEntry(entryQuery).then(function (data) {\n        return TickService.getTask(data.task_id);\n      }).then(function (task) {\n        var id = task.id,\n            project_id = task.project_id,\n            project = task.project,\n            budget = task.budget,\n            name = task.name,\n            total_hours = task.total_hours;\n        dispatch({\n          type: TICK_SET_TASK,\n          task: {\n            id: id,\n            project_id: project_id,\n            budget: budget,\n            name: name,\n            total_hours: total_hours,\n            timeValue: entry.timeValue,\n            project_name: project.name\n          }\n        });\n        setIsFetching(false, dispatch);\n      }).catch(function (error) {\n        var errorMessages = [];\n\n        switch (error.code) {\n          case TICK_UNAUTHORIZED_STATUS:\n            errorMessages.push({\n              message: TICK_UNAUTHORIZED_TEXT\n            });\n            break;\n\n          case TICK_UNPROCESSABLE_STATUS:\n            errorMessages.push({\n              message: TICK_UNPROCESSABLE_TEXT\n            });\n            break;\n\n          default:\n            errorMessages.push({\n              message: TICK_BAD_REQUEST_TEXT\n            });\n        }\n\n        displayMessages(errorMessages)(dispatch);\n        setIsFetching(false, dispatch);\n      });\n    } else {\n      displayMessages(errors)(dispatch);\n    }\n  };\n};","map":{"version":3,"sources":["/home/alex/Desktop/tick/src/actions/Tick.js"],"names":["TickService","isErrorsTickEntries","TICK_SET_IS_AUTH","TICK_SET_PROJECT","TICK_SET_SELECTED_TASK","TICK_SET_PROJECTS","TICK_SET_TASKS","TICK_SET_TIME","TICK_SET_DATE","TICK_SET_MESSAGE","TICK_CLEAR","TICK_SET_TASK","TICK_SET_MESSAGES","DELAY_HIDE_MESSAGES","TICK_UNAUTHORIZED_TEXT","TICK_UNAUTHORIZED_STATUS","TICK_UNPROCESSABLE_STATUS","TICK_UNPROCESSABLE_TEXT","TICK_BAD_REQUEST_TEXT","TICK_SET_IS_FETCHING","displayMessages","messages","dispatch","type","setTimeout","setIsFetching","isFetching","setClients","data","tickClients","forEach","client","id","localStorage","setItem","JSON","stringify","setProjects","projects","clients","parse","getItem","projectOptions","reduce","project","lastProject","length","client_id","push","label","value","concat","name","tickAuth","username","password","auth","then","Array","isArray","Error","dataAuth","isAuth","getUsers","users","currentUser","find","user","email","Promise","all","getClients","getProjects","catch","error","code","message","tickIsAuth","tickLogout","isTickAuth","isTickUser","removeItem","tasks","changeProject","selectedProject","getTasks","response","status","changeTask","selectedTask","changeTickTime","timeValue","changeTickDate","date","dateValue","format","tickReturnTracker","changeTickMessage","messageValue","createEntry","entry","errors","entryQuery","hours","notes","taskId","userId","getTask","task_id","task","project_id","budget","total_hours","project_name","errorMessages"],"mappings":"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","sourcesContent":["import TickService from '../services/Tick';\nimport {\n  isErrorsTickEntries,\n} from '../services/TickValidate';\nimport {\n  TICK_SET_IS_AUTH,\n  TICK_SET_PROJECT,\n  TICK_SET_SELECTED_TASK,\n  TICK_SET_PROJECTS,\n  TICK_SET_TASKS,\n  TICK_SET_TIME,\n  TICK_SET_DATE,\n  TICK_SET_MESSAGE,\n  TICK_CLEAR,\n  TICK_SET_TASK,\n  TICK_SET_MESSAGES,\n  DELAY_HIDE_MESSAGES,\n  TICK_UNAUTHORIZED_TEXT,\n  TICK_UNAUTHORIZED_STATUS,\n  TICK_UNPROCESSABLE_STATUS,\n  TICK_UNPROCESSABLE_TEXT,\n  TICK_BAD_REQUEST_TEXT,\n  TICK_SET_IS_FETCHING,\n} from '../constants/Tick';\n\n/**\n * Set track message for task\n * @param {array} messages\n * @returns {Function}\n */\nexport const displayMessages = (messages) => (dispatch) => {\n  dispatch({\n    type: TICK_SET_MESSAGES,\n    messages,\n  });\n\n  setTimeout(() => {\n    dispatch({\n      type: TICK_SET_MESSAGES,\n      messages: [],\n    });\n  }, DELAY_HIDE_MESSAGES);\n};\n\nconst setIsFetching = (isFetching, dispatch) => {\n  dispatch({\n    type: TICK_SET_IS_FETCHING,\n    isFetching,\n  });\n}\n\nconst setClients = (data) => {\n  const tickClients = {};\n  data.forEach(client => {\n    tickClients[client.id] = client;\n  });\n  localStorage.setItem('tickClients', JSON.stringify(tickClients));\n  return tickClients;\n} \n\nconst setProjects = (projects, dispatch)=> {\n  const clients = JSON.parse(localStorage.getItem('tickClients'));\n  const projectOptions = projects.reduce((data, project) => {\n\n    let lastProject = data.length ? data[data.length-1] : null;\n   \n    if(!lastProject || lastProject.client_id !== project.client_id) {\n      data.push({\n        label:clients[project.client_id]['name'],\n        client_id:project.client_id,\n        value:'',\n      });\n    }\n    \n    return data.concat({\n      label:project.name,\n      client_id:project.client_id,\n      value: project.id,\n    });\n\n  }, []);\n\n  /**\n   * Set projects for redux state\n   */\n  dispatch({\n    type: TICK_SET_PROJECTS,\n    projects:projectOptions,\n  });\n}\n\n/**\n * Tick auth handler\n * @param username\n * @param password\n * @returns {Function}\n */\nexport const tickAuth = (username, password) => (dispatch) => {\n  setIsFetching(true, dispatch);\n  TickService.auth(username, password).then((data) => {\n    if(!Array.isArray(data)) {\n      throw new Error(TICK_BAD_REQUEST_TEXT);\n    }\n    const dataAuth = data && data[0] ? data[0] : null;\n    /**\n     * Save user auth token, subscription_id and username for localStorage\n     */\n    localStorage.setItem('tickAuth', JSON.stringify({\n      ...dataAuth,\n      username,\n    }));\n    /**\n     * Set is auth params for check isLogged user\n     */\n    dispatch({\n      type: TICK_SET_IS_AUTH,\n      isAuth: true,\n    });\n  })\n  .then(() => {\n\n    /**\n     * Get users\n     */\n    return TickService.getUsers();\n  })\n  .then((users) => {\n\n    /**\n     * Save user data for localStorage\n     */\n    const currentUser = users.find(user => user.email === username);\n    localStorage.setItem('tickUser', JSON.stringify(currentUser));\n  })\n  .then(() => {\n    /**\n     * Get user clients and projects\n     */\n    return Promise.all([\n      TickService.getClients(),\n      TickService.getProjects(),\n    ]);\n\n  }).then(([clients, projects]) => {\n\n    setClients(clients);\n    setProjects(projects, dispatch);\n    setIsFetching(false, dispatch);\n\n  }).catch((error) => {\n    if (error.code === TICK_UNAUTHORIZED_STATUS) {\n      displayMessages([{\n        message: TICK_UNAUTHORIZED_TEXT,\n      }])(dispatch);\n    }\n    setIsFetching(false, dispatch);\n  });\n};\n\n/**\n * Check exists user in localStorage\n * @returns {Function}\n */\nexport const tickIsAuth = () => (dispatch) => {\n  const isAuth = !!localStorage.getItem('tickAuth');\n\n  dispatch({\n    type: TICK_SET_IS_AUTH,\n    isAuth,\n  });\n\n  if (isAuth) {\n    TickService.getProjects()\n    .then((projects) => {\n      setProjects(projects, dispatch)\n    });\n  }\n};\n\n/**\n * Logout user from tick\n * clear localStorage\n * @returns {Function}\n */\nexport const tickLogout = () => (dispatch) => {\n  const isTickAuth = !!localStorage.getItem('tickAuth');\n  const isTickUser = !!localStorage.getItem('tickUser');\n  if(isTickAuth || isTickUser) {\n    localStorage.removeItem('tickAuth');\n    localStorage.removeItem('tickUser');\n    dispatch({\n      type: TICK_SET_IS_AUTH,\n      isAuth: false,\n    });\n    dispatch({\n      type: TICK_CLEAR,\n    });\n    dispatch({\n      type: TICK_SET_PROJECTS,\n      projects:[]\n    });\n    dispatch({\n      type: TICK_SET_TASKS,\n      tasks:[]\n    });\n  }\n};\n\n/**\n * Set selected project and get project tasks\n * @param {object} selectedProject\n * @returns {Function}\n */\nexport const changeProject = (selectedProject) => (dispatch) => {\n  setIsFetching(true, dispatch);\n  TickService.getTasks(selectedProject.value).then((tasks) => {\n    dispatch({\n      type: TICK_SET_PROJECT,\n      selectedProject,\n    });\n    dispatch({\n      type: TICK_SET_TASKS,\n      tasks,\n    });\n    setIsFetching(false, dispatch);\n  }).catch((error) => {\n    if (error.response.status === TICK_UNAUTHORIZED_STATUS) {\n      displayMessages([{\n        message: TICK_UNAUTHORIZED_TEXT,\n      }])(dispatch);\n    }\n    setIsFetching(false, dispatch);\n  });\n};\n\n/**\n * Set selected task\n * @param {object} selectedTask\n * @returns {Function}\n */\nexport const changeTask = (selectedTask) => (dispatch) => {\n  dispatch({\n    type: TICK_SET_SELECTED_TASK,\n    selectedTask,\n  });\n\n};\n\n/**\n * Set track time for task\n * @param {string} value\n * @returns {Function}\n */\nexport const changeTickTime = (value) => (dispatch) => {\n  dispatch({\n    type: TICK_SET_TIME,\n    timeValue: value,\n  });\n};\n\n/**\n * Set track date for task\n * @param {object} date\n * @returns {Function}\n */\nexport const changeTickDate = (date) => (dispatch) => {\n  // if user not input full date set date empty string\n  const dateValue = date ? date.format('Y-M-D') : '';\n  dispatch({\n    type: TICK_SET_DATE,\n    dateValue,\n  });\n};\n\n/**\n * Hide task status and show tracker\n * @returns {Function}\n */\nexport const tickReturnTracker = () => (dispatch) => {\n  dispatch({\n    type: TICK_CLEAR,\n  });\n};\n\n/**\n * Set track message for task\n * @param {string} messageValue\n * @returns {Function}\n */\nexport const changeTickMessage = (messageValue) => (dispatch) => {\n  dispatch({\n    type: TICK_SET_MESSAGE,\n    messageValue,\n  });\n};\n\n/**\n * Send track time\n * @param {object} entry\n * @returns {Function}\n */\nexport const createEntry = (entry) => (dispatch) => {\n  const errors = isErrorsTickEntries(entry);\n  // get tick user tick data from localStorage\n  const user = JSON.parse(localStorage.getItem('tickUser'));\n\n  if (!errors.length) {\n    setIsFetching(true, dispatch);\n    // set data for create entry method\n    const entryQuery = {\n      date: entry.dateValue,\n      hours: entry.timeValue,\n      notes: entry.messageValue,\n      taskId: entry.selectedTask.value,\n      userId: user.id,\n    };\n\n    TickService.createEntry(entryQuery)\n    .then((data) => {\n      return TickService.getTask(data.task_id);\n    })\n    .then((task) => {\n      const {\n        id,\n        project_id,\n        project,\n        budget,\n        name,\n        total_hours,\n      } = task;\n      dispatch({\n        type: TICK_SET_TASK,\n        task: {\n          id,\n          project_id,\n          budget,\n          name,\n          total_hours,\n          timeValue: entry.timeValue,\n          project_name: project.name,\n        },\n      });\n      setIsFetching(false, dispatch);\n    }).catch((error) => {\n      let errorMessages = [];\n\n      switch (error.code) {\n        case TICK_UNAUTHORIZED_STATUS :\n          errorMessages.push(\n            {\n              message:TICK_UNAUTHORIZED_TEXT,\n            }\n          );\n          break;\n        case TICK_UNPROCESSABLE_STATUS:\n          errorMessages.push(\n            {\n              message:TICK_UNPROCESSABLE_TEXT,\n            }\n          );\n          break;\n\n        default:\n          errorMessages.push(\n            {\n              message:TICK_BAD_REQUEST_TEXT,\n            }\n          );\n      }\n\n      displayMessages(errorMessages)(dispatch);\n      setIsFetching(false, dispatch);\n    });\n\n  } else {\n    displayMessages(errors)(dispatch);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}