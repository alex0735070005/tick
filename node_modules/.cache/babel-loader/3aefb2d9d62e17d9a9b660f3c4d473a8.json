{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = populateEntity;\n/*\n * Fetch and populate an entity by id encoded in the\n * access token payload. Useful for easily getting the\n * current user after authentication, or any other entity.\n */\n\nfunction populateEntity() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!options.service) {\n    throw new Error('You need to pass \\'options.service\\' to the populateEntity() hook.');\n  }\n\n  if (!options.field) {\n    throw new Error('You need to pass \\'options.field\\' to the populateEntity() hook.');\n  }\n\n  if (!options.entity) {\n    throw new Error('You need to pass \\'options.entity\\' to the populateEntity() hook.');\n  }\n\n  return function (hook) {\n    var app = hook.app;\n\n    if (hook.type !== 'after') {\n      return Promise.reject(new Error('The \\'populateEntity\\' hook should only be used as an \\'after\\' hook.'));\n    }\n\n    return app.passport.verifyJWT(hook.result.accessToken).then(function (payload) {\n      var id = payload[options.field];\n\n      if (!id) {\n        return Promise.reject(new Error('Access token payload is missing the \\'' + options.field + '\\' field.'));\n      }\n\n      return app.service(options.service).get(id);\n    }).then(function (entity) {\n      hook.result[options.entity] = entity;\n      app.set(options.entity, entity);\n      return Promise.resolve(hook);\n    });\n  };\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}